import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var CallNumber = /** @class */ (function (_super) {
    __extends(CallNumber, _super);
    function CallNumber() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CallNumber.prototype.callNumber = function (numberToCall, bypassAppChooser) { return cordova(this, "callNumber", { "callbackOrder": "reverse" }, arguments); };
    CallNumber.prototype.isCallSupported = function () { return cordova(this, "isCallSupported", {}, arguments); };
    CallNumber.pluginName = "CallNumber";
    CallNumber.plugin = "call-number";
    CallNumber.pluginRef = "plugins.CallNumber";
    CallNumber.repo = "https://github.com/Rohfosho/CordovaCallNumberPlugin";
    CallNumber.platforms = ["Android", "iOS"];
CallNumber.ɵfac = function CallNumber_Factory(t) { return ɵCallNumber_BaseFactory(t || CallNumber); };
CallNumber.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CallNumber, factory: function (t) { return CallNumber.ɵfac(t); } });
var ɵCallNumber_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(CallNumber);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CallNumber, [{
        type: Injectable
    }], null, null); })();
    return CallNumber;
}(IonicNativePlugin));
export { CallNumber };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvY2FsbC1udW1iZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7O0FBQ3hFO0lBOEJnQyw4QkFBaUI7Ozs7SUFVL0MsK0JBQVUsYUFBQyxZQUFvQixFQUFFLGdCQUF5QjtJQVMxRCxvQ0FBZTs7Ozs7OENBSW1SO0lBdkJ2UixVQUFVLHdCQUR0QixVQUFVLEVBQUUsUUFDQSxVQUFVOzs7OzswQkFBRTtxQkFoQ3pCO0VBZ0NnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG4vKipcbiAqIEBuYW1lIENhbGwgTnVtYmVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIENhbGwgYSBudW1iZXIgZGlyZWN0bHkgZnJvbSB5b3VyIENvcmRvdmEvSW9uaWMgYXBwbGljYXRpb24uXG4gKiAqKk5PVEUqKjogVGhlIGlPUyBTaW11bGF0b3IgKGFuZCBtYXliZSBBbmRyb2lkIFNpbXVsYXRvcnMpIGRvIG5vdCBwcm92aWRlIGFjY2VzcyB0byB0aGUgcGhvbmUgc3Vic3lzdGVtLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQ2FsbE51bWJlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY2FsbC1udW1iZXIvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhbGxOdW1iZXI6IENhbGxOdW1iZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiB0aGlzLmNhbGxOdW1iZXIuY2FsbE51bWJlcihcIjE4MDAxMDEwMTAxXCIsIHRydWUpXG4gKiAgIC50aGVuKHJlcyA9PiBjb25zb2xlLmxvZygnTGF1bmNoZWQgZGlhbGVyIScsIHJlcykpXG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yIGxhdW5jaGluZyBkaWFsZXInLCBlcnIpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdDYWxsTnVtYmVyJyxcbiAgcGx1Z2luOiAnY2FsbC1udW1iZXInLFxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLkNhbGxOdW1iZXInLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1JvaGZvc2hvL0NvcmRvdmFDYWxsTnVtYmVyUGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhbGxOdW1iZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDYWxscyBhIHBob25lIG51bWJlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbnVtYmVyVG9DYWxsIFRoZSBwaG9uZSBudW1iZXIgdG8gY2FsbCBhcyBhIHN0cmluZ1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGJ5cGFzc0FwcENob29zZXIgU2V0IHRvIHRydWUgdG8gYnlwYXNzIHRoZSBhcHAgY2hvb3NlciBhbmQgZ28gZGlyZWN0bHkgdG8gZGlhbGVyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZScsXG4gIH0pXG4gIGNhbGxOdW1iZXIobnVtYmVyVG9DYWxsOiBzdHJpbmcsIGJ5cGFzc0FwcENob29zZXI6IGJvb2xlYW4pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBjYWxsIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNDYWxsU3VwcG9ydGVkKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=